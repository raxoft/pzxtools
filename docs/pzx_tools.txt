PZX tools documentation
=======================

The PZX tools suite consists of several tools for converting data to and
from PZX format. Each of these tools reads the data from file given on
command line (or standard input if no file name is specified on command
line) and writes the output to file specified with the -o option (or standard
output if no such file name is specified). Each tool may also have its own
set of additional options, which may be obtained simply by using the -h option.

The purpose of each tool should easy to guess from its name, however here is
the list to make it clear:

tzx2pzx - convert TZX files to PZX files.
tap2pzx	- convert TAP files to PZX files.
csw2pzx	- convert CSW files to PZX files.

pzx2wav - convert PZX files to WAV files.

pzx2txt - dump PZX files to text output.
txt2pzx - create PZX files from text input.

The more detailed of each of these tools follows.

Converting to PZX
=================

tzx2pzx
-------

This tool can be used to convert TZX files to PZX. The tool currently
supports all features of TZX format specification 1.20. In case you are
interested, see PZX format specification about how each TZX block is mapped
to PZX. But most likely you don't need to worry about that at all.

Note that in case you would like to adjust something in the resulting PZX,
like tape file information texts or their encoding, simply use pzx2txt, edit
whatever you need, then use txt2pzx to convert your edited text back to PZX.

Options: none

tap2pzx
-------

This tool can be used to convert TAP (aka BLK) files to PZX. Normally you
would not need to do that, as TAP files are supported by any emulator which
supports tape files at all, but it may be eventually useful if you would
like to add things which TAP files can't store. This may include things like
textual information about the tape file itself, specific pause blocks
between the data blocks, or browse or stop blocks which may help in case of
multilevel games.

Options:

-p n	Add pause of given duration (specified in ms) after each data block.

	By default, no pause is added, as most tape files don't need one anyway.

csw2pzx
-------

This tool can be used to convert CSW files to PZX. The tool currently
supports both 1.01 and 2.00 CSW files. Note that the resulting file will be
usually bigger than the original CSW file, but once compressed with an
archiving program, it may even become smaller than the original.

Options: none

Converting from PZX
===================

pzx2wav
-------

This tool can be used to create WAV files from PZX. WAV files are the most
common format for storing recorded sound, so this tool comes in handyd whenever
you would need to "play" the tape file for whatever reason. Most often you
would need it if you want to load it on a real hardware connected to your
sound card instead of the tape deck.

Options:

-s n	Create the WAV file using given sample rate, specified in Hz.

	By default, the 44100Hz sample rate is used, which corresponds to CD quality.

Messing up with PZX
===================

pzx2txt
-------

This tool can be used to dump content of the PZX files in textual form. This
is invaluable tool for whoever needs to examine the content of the PZX file
in human readable form. Also, thanks to the fact that the textual output can
be converted back to PZX file using txt2pzx, the text form can be easily
used for reasonably convenient editing of the PZX files, by the means of any
text editor or any text processing tool.

The output of the tool lists blocks of the original PZX file. The output
should be pretty easy to understand for whoever read the PZX format
specification, and is in more detail described later.

Options:

-p	Dump the DATA blocks in the same way as PULSE blocks,
	as a sequence of pulses. This may be useful in case you need to
	examine/process everything as pulses only. It may be also handy
	if you want to pack several blocks into one DATA block with the PACK
	keyword, see description of the text form.

	By default, the DATA blocks are dumped as DATA blocks.

-a	Dump the ASCII characters stored in DATA blocks as ASCII
	characters, not hexadecimal numbers, which makes them easily
	readable in the generated output.

	By default, everything is dumped as hexadecimal number, which
	makes it somewhat easier for any data processing.

-x	Dump any 19 byte DATA block in a way which makes it more readable if it
	was a standard ZX Spectrum header.

	By default, all DATA blocks are dumped in the same way.

-d	Don't dump the content of the DATA blocks, just their headers.
	This is useful in case you want just to examine the overall PZX block
	structure, not the data themselves.

	By default, the content of the DATA blocks is dumped as well.

-e	Expand the pulses, dumping each pulse of a PULSE block on its own line.
	This makes it more friendly to scripts which need to process the
	pulses in some way.

	By default, the pulse sequence is dumped in the same way as it was
	stored in the PULSE block, the duration followed by an optional
	repeat count.

	See also the -p option of txt2pzx.

txt2pzx
-------

This tool can be used to create the PZX files from properly prepared text
input. Most often the input will be the output of the pzx2txt tool, but it
may be as well created by hand or by a script. The syntax of the text format
is described in more detail in a later chapter.

The tool will read the input and generate the corresponding PZX output,
eventually generating some warnings in case it finds some discrepancies.
In either case the user is advised to run pzx2txt on the resulting output
to make sure the output really contains the intended input.

Options:

-p	When creating PULSE blocks, store the pulses exactly as the are
	specified in the input file. This is useful mostly for developers
	who may need to prepare specific pulse sequences.

	By default, PULSE block boundaries are ignored and pulses themselves
	are merged together whenever possible.

	See also the -e option of pzx2txt.

PZX text format syntax
======================

The text format consists of sequence of lines, each line starting with a
keyword, followed by values appropriate for that keyword. Empty lines and
lines starting with # are ignored.

Overall the format closely matches the PZX format structure. Some keywords
introduce corresponding PZX blocks while other keywords are used to provide
data for the current block. All keywords are explained in detail below.

Current pulse level is maintained during the processing of the text input.
It starts low at the beginning and each keyword may depend on and/or affect
the current pulse level. Although most people don't need to worry about this
at all, it is explained in detail below as well.

Keywords are simple ASCII character sequences listed later. Each keyword
specifies what values it uses and whether they are required (enclosed in <>)
or optional (enclosed in []). Keyword values themselves are either numbers,
strings, or data:

- Numbers are normal unsigned numbers, written in decimal by default, in
hexadecimal if prefixed with 0x, or in binary when prefixed with 0b.

- Strings are enclosed in double quotes, and backslash is used to escape
double quotes and backslash. The sequences \n, \r, \t are recognized as
well, as is the \xNN sequence for encoding any character in hexadecimal.

- Data is a sequence of octets, each encoded either as two character
hexadecimal number, or as a dot followed by the corresponding ASCII
character.

The following block-introducing keywords are defined:

PZX [major.minor]
-----------------

This keyword introduces the PZX ZXTP header block.

The major and minor are printed only for reference by pzx2txt and are
entirely ignored when encoding.

Keywords this block may contain: INFO

Pulse level: not affected.

Example:

	PZX 1.0
	INFO "Test tape file"

PULSES
------

This keyword introduces the PZX PULS block.

The block itself consists of a sequence of arbitrary pulses.

Keywords this block may contain: PULSE

Pulse level: always set to low.

Example:

	PULSES
	PULSE 2168 8063
	PULSE 667
	PULSE 735

DATA [pulse level]
------------------

This keyword introduces the PZX DATA block.

The block itself consists of sequence of octets, and information about how to
convert the octets to pulses.

The optional pulse level may be used to specify the initial pulse level of
the DATA block. When not present, the current pulse level is used.

Keywords this block may contain: SIZE, BITS, BIT0, BIT1, TAIL, BODY, BYTE, WORD, XOR, ADD, SUM

Pulse level: always set to low.

Example:

	DATA
	SIZE 19
	TAIL 945
	BIT0 855 855
	BIT1 1710 1710
	BYTE 0 0
	BODY .T.E.S.T. .T.A.P.E.
	WORD 1234 10 1234
	XOR

PACK [pulse level] [sequence limit] [sequence order]
----------------------------------------------------

This keyword introduces either the PZX DATA or the PZX PULS block,
depending on whether the following pulses can be packed or not, respectively.

The block itself consists of a sequence of pulses. Once the block is complete, an
attempt is made to find two pulse sequences which may be used to encode all
of the pulses as a sequence of bits. If such sequences are found, the pulses
are converted to the corresponding DATA block. If no such sequences are
found, warning is issued and the pulses are stored as usual as part of the
PULS block.

The optional pulse level may be used to set the current pulse level. When
not present, the current pulse level is left intact.

The sequence limit specifies how long pulse sequences to consider at maximum
when searching for sequences used to encode the bits. When not present, the
default value 2 is used. The maximum value is 255.

The sequence order is may be used to control which sequence is going to
become sequence 0 and which sequence 1. When set to 0 or 1, the sequence
starting at the first pulse becomes sequence 0 or 1, respectively. When set
to 2, the sequence whose total duration is shorter becomes sequence 0. When
not present, the default value 2 is used.

Keywords this block may contain: PULSE, TAIL

Pulse level: may be forced, see above.

Example:

	PACK
	PULSE 855 4
	PULSE 1710 2
	PULSE 855 2
	PULSE 1710 8
	TAIL 945

PAUSE <duration> [pulse level]
------------------------------

This keyword introduces the PZX PAUSE block.

The block itself consists of a pause pulse of given duration.

The optional pulse level may be used to specify the level of the pause pulse
as well as the current pulse level. When not present, it is as if it was set to low.

Keywords this block may contain: none

Pulse level: always forced, see above.

Example:

	PAUSE 3500000
	PAUSE 3500 1

STOP [flags]
------------

This keyword introduces the PZX STOP block.

The block itself consists of information when to stop the virtual tape deck.

The optional flags value may specify when exactly to do that. Value 0 means
stop always, value 1 means stop only in 48k mode. See PZX format
specification for more details and possibly other values. When not present,
it is as if it was set to 0.

Keywords this block may contain: none

Pulse level: not affected

Example:

	STOP
	STOP 1
