PZX text format syntax version 1.1
==================================

This is the description of the PZX text format as used by the pzx2txt and
txt2pzx tools.

The text format consists of sequence of lines, each line starting with a
keyword, followed by values appropriate for that keyword. Empty lines and
lines starting with # are ignored.

Overall the format closely matches the PZX format structure. Some keywords
introduce corresponding PZX blocks while other keywords are used to provide
data for the current block. All keywords are explained in detail below.

Current pulse level is maintained during the processing of the text input.
It starts low at the beginning and each keyword may depend on and/or affect
the current pulse level. Although most people don't need to worry about this
at all, it is explained in detail below as well.

Keywords are simple ASCII character sequences listed later. Each keyword
specifies what values it uses and whether they are required (enclosed in <>)
or optional (enclosed in []). Keyword values themselves are either numbers,
strings, or data:

- Numbers are normal unsigned numbers, written in decimal by default, in
hexadecimal if prefixed with 0x, or in binary when prefixed with 0b.

- Strings are enclosed in double quotes, and backslash is used to escape
double quotes and backslash. The sequences \n, \r, \t are recognized as
well, as is the \xNN sequence for encoding any character in hexadecimal.

- Data is a sequence of octets, each encoded either as two character
hexadecimal number, or as a dot followed by the corresponding ASCII
character.


Block introducing keywords
==========================

The block-introducing keywords are defined below.

Please note that the description of how pulse level is affected refer to the
internal pulse level maintained while processing the text form, not how the
resulting PZX blocks affect the pulse level in the PZX file.

PZX [major.minor]
-----------------

This keyword introduces the PZX header block.

The major and minor version numbers are printed only for reference by
pzx2txt and are entirely ignored when encoding.

Keywords this block may contain: INFO

Pulse level: not affected.

Example:

        PZX 1.0
        INFO "Test tape file"

PULSES
------

This keyword introduces the PZX PULS block.

The block itself consists of a sequence of arbitrary pulses.

Keywords this block may contain: PULSE

Pulse level: always set to low.

Example:

        PULSES
        PULSE 2168 8063
        PULSE 667
        PULSE 735

DATA [pulse level]
------------------

This keyword introduces the PZX DATA block.

The block itself consists of sequence of octets, and information about how to
convert the octets to pulses.

The optional pulse level may be used to specify the initial pulse level of
the DATA block. When not present, the current pulse level is used.

Keywords this block may contain: SIZE, BITS, BIT0, BIT1, TAIL, BODY, BYTE, WORD, XOR, ADD, SUB

Pulse level: always set to low.

Example:

        DATA
        SIZE 19
        TAIL 945
        BIT0 855 855
        BIT1 1710 1710
        BYTE 0 0
        BODY .T.E.S.T. .T.A.P.E.
        WORD 1234 10 1234
        XOR

PACK [pulse level] [sequence limit] [sequence order]
----------------------------------------------------

This keyword introduces either the PZX DATA or the PZX PULS block,
depending on whether the following pulses can be packed or not, respectively.

The block itself consists of a sequence of pulses. Once the block is complete, an
attempt is made to find two pulse sequences which may be used to encode all
of the pulses as a sequence of bits. If such sequences are found, the pulses
are converted to the corresponding DATA block. If no such sequences are
found, warning is issued and the pulses are stored as usual as part of the
PULS block.

The optional pulse level may be used to set the current pulse level. When
not present, the current pulse level is left intact.

The sequence limit specifies how long pulse sequences to consider at maximum
when searching for sequences used to encode the bits. When not present, the
default value 2 is used. The maximum value is 255.

The sequence order may be used to control which sequence is going to
become sequence 0 and which sequence 1. When set to 0 or 1, the sequence
starting at the first pulse becomes sequence 0 or 1, respectively. When set
to 2, the sequence whose total duration is shorter becomes sequence 0. When
not present, the default value 2 is used.

Keywords this block may contain: PULSE

Pulse level: may be forced, see above.

Example:

        PACK
        PULSE 855 4
        PULSE 1710 2
        PULSE 855 2
        PULSE 1710 8
        PULSE 945

PAUSE <duration> [pulse level]
------------------------------

This keyword introduces the PZX PAUSE block.

The block itself consists of a pause pulse of given duration.

The optional pulse level may be used to specify the level of the pause pulse
as well as the current pulse level. When not present, it is as if it was set to low.

Keywords this block may contain: none

Pulse level: always forced, see above.

Example:

        PAUSE 3500000
        PAUSE 3500 1

STOP [flags]
------------

This keyword introduces the PZX STOP block.

The block itself consists of information when to stop the virtual tape deck.

The optional flags value may specify when exactly to do that. Value 0 means
stop always, value 1 means stop only in 48k mode. See PZX format
specification for more details and possibly other values. When not present,
it is as if it was set to 0.

Keywords this block may contain: none

Pulse level: not affected.

Example:

        STOP
        STOP 1

BROWSE <"string">
-----------------

This keyword introduces the PZX BRWS block.

The block itself consists of string information used as aid while browsing
the tape content. See PZX format specification for more info about the string content.

Keywords this block may contain: none

Pulse level: not affected.

Example:

        BROWSE "Level 1"

TAG <tag name>
--------------

This keyword introduces any unknown PZX block.

The block itself consists of an opaque sequence of octets. 

The tag name is the tag used for the PZX block. It must consists of exactly
four ASCII characters.

Keywords this block may contain: SIZE, BODY, BYTE, WORD, XOR, ADD, SUB

Pulse level: not affected.

Example:

        TAG wtfk
        BODY FF001234


Block content keywords
======================

The keywords which provide the block content are defined below.

Note that some of them may appear only in one specific block, while others
may be used in multiple blocks. However, even in such case their meaning
remains the same.

For examples, see the description of the corresponding block keyword.

INFO <"string">
---------------

This keyword provides UTF-8 encoded string used in the PZX header block.
Each such keyword adds one such string. The first string is the name of the
tape, the remaining pairs provide additional information. See the PZX format
specification for more specific details and requirements.

Blocks this keyword may appear in: PZX

Pulse level: not affected.

PULSE[0|1] <duration> [count]
-----------------------------

This keyword adds given amount of pulses of given duration to the current
block.

Both duration and count are normally arbitrary 32 bit numbers, but may be
limited to less bits in case some special features are used when encoding.
For example, using using -p option of txt2pzx limits duration to 31 bits and
count to 15 bits, and use of the PACK block limits the duration to 16 bits.

Note that the PULSE keyword may be annotated with the optional pulse level,
such as when generated with -l option of pzx2txt. However this annotation
has no effect on the actual level of the pulse, which is controlled solely
by the enclosing block and the amount of preceding pulses as usual.

Blocks this keyword may appear in: PULSES, PACK

Pulse level: toggled for each single pulse added.

SIZE <size>
-----------

This keyword specifies the expected size of the data in the current block in
bytes. In case of DATA block, the byte used extra bits (see BITS keyword)
are not included.

In either case, this keyword is printed by pzx2txt only for reference only.
When encoding, it is ignored and the size is deduced from the block data
themselves. In case there is mismatch between that size and the size
specified by this keyword, warning is printed, but the data are processed
nevertheless.

Blocks this keyword may appear in: DATA, TAG

Pulse level: not affected.

BITS <bits>
-----------

This keyword specifies how many bits of the last data byte are used. Note
that both 0 and 8 are treated as if the entire last byte is used. When not
specified, all bits of the last byte are used.

Blocks this keyword may appear in: DATA

Pulse level: not affected.

BIT0 [pulse] ...
----------------

This keyword specifies what pulse sequence to use for bit 0 in the data.
Each use such keyword extends the sequence, which is cleared each time the DATA
block is finished.

Blocks this keyword may appear in: DATA

Pulse level: not affected.

BIT1 [pulse] ...
----------------

Like BIT0, but for bit 1.

TAIL <duration>
---------------

This keyword specifies the duration of the tail pulse for current block.
When not specified, 0 is used, meaning no tail pulse is generated.

Blocks this keyword may appear in: DATA

Pulse level: not affected.

BODY [data]
-----------

This keyword provides the bulk content of the current block. Each use of
such keyword appends more content, which is cleared each time the block is
complete.

Blocks this keyword may appear in: DATA, TAG

Pulse level: not affected.

BYTE [byte] ...
---------------

This keyword is like BODY, except that the values are specified and
processed as 8 bit numbers, not data. This may be used to make the content
more readable.

Blocks this keyword may appear in: DATA, TAG

Pulse level: not affected.

WORD [word] ...
---------------

This keyword is like BODY, except that the values are specified and
processed as 16 bit little endian numbers, not data. This may be used to
make the content more readable.

Blocks this keyword may appear in: DATA, TAG

Pulse level: not affected.

XOR [initial value]
-------------------

This keyword may be used to append simple checksum to the block content.

The 8 bit accumulator is initialized with provided initial value, or zero if
not present, and then updated with exclusive-or of each byte of current block. The
result is then appended to the block content.

Blocks this keyword may appear in: DATA, TAG

Pulse level: not affected.

ADD [initial value]
-------------------

Like XOR, except that addition is used instead of exclusive-or.

SUB [initial value]
-------------------

Like XOR, except that subtraction is used instead of exclusive-or.


History
=======

1.1 (21.4.2011)

+ added note about annotated pulses.

1.0 (16.6.2007)

+ initial release.
